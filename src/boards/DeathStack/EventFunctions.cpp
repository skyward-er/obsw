/* Copyright (c) 2018 Skyward Experimental Rocketry
 * Authors: Luca Erbetta
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/*
 ******************************************************************************
 *                  THIS FILE IS AUTOGENERATED. DO NOT EDIT.                  *
 ******************************************************************************
 */

// Generated from:  https://docs.google.com/spreadsheets/d/1msICDqJtSseSP_JAoAPoKIzpKlI6bI2n8lwws1X2hz4
// Autogen date:    2019-05-20 16:15:05.731880


#include "Events.h"
#include "Topics.h"

#include <map>
using std::map;

namespace DeathStackBoard
{

string getEventString(uint8_t event)
{
    static const map<uint8_t, string> event_string_map {
        { EV_ADA_APOGEE_DETECTED, "EV_ADA_APOGEE_DETECTED" },
        { EV_ADA_DPL_ALT_DETECTED, "EV_ADA_DPL_ALT_DETECTED" },
        { EV_ADA_READY, "EV_ADA_READY" },
        { EV_CALIBRATE_ADA, "EV_CALIBRATE_ADA" },
        { EV_CUT_ALL, "EV_CUT_ALL" },
        { EV_CUT_DROGUE, "EV_CUT_DROGUE" },
        { EV_CUT_MAIN, "EV_CUT_MAIN" },
        { EV_MOT_MIN_OPEN_TIME, "EV_MOT_MIN_OPEN_TIME" },
        { EV_MOT_OPEN_LIMIT, "EV_MOT_OPEN_LIMIT" },
        { EV_MOT_CLOSE_LIMIT, "EV_MOT_CLOSE_LIMIT" },
        { EV_NC_CLOSE, "EV_NC_CLOSE" },
        { EV_NC_OPEN, "EV_NC_OPEN" },
        { EV_NC_STOP, "EV_NC_STOP" },
        { EV_APOGEE, "EV_APOGEE" },
        { EV_DPL_ALTITUDE, "EV_DPL_ALTITUDE" },
        { EV_INIT_ERROR, "EV_INIT_ERROR" },
        { EV_INIT_OK, "EV_INIT_OK" },
        { EV_LANDED, "EV_LANDED" },
        { EV_LIFTOFF, "EV_LIFTOFF" },
        { EV_NC_DETACHED, "EV_NC_DETACHED" },
        { EV_TEST_MODE, "EV_TEST_MODE" },
        { EV_FLIGHTSTATS_TIMEOUT, "EV_FLIGHTSTATS_TIMEOUT" },
        { EV_BUTTON_DOWN, "EV_BUTTON_DOWN" },
        { EV_BUTTON_UP, "EV_BUTTON_UP" },
        { EV_BUTTON_SHORT_PRESS, "EV_BUTTON_SHORT_PRESS" },
        { EV_BUTTON_LONG_PRESS, "EV_BUTTON_LONG_PRESS" },
        { EV_BUTTON_VERY_LONG_PRESS, "EV_BUTTON_VERY_LONG_PRESS" },
        { EV_TC_ABORT_ROGALLO, "EV_TC_ABORT_ROGALLO" },
        { EV_TC_START_ROGALLO_CONTROL, "EV_TC_START_ROGALLO_CONTROL" },
        { EV_TC_ARM, "EV_TC_ARM" },
        { EV_TC_SET_DPL_ALTITUDE, "EV_TC_SET_DPL_ALTITUDE" },
        { EV_TC_BOARD_RESET, "EV_TC_BOARD_RESET" },
        { EV_TC_CUT_MAIN, "EV_TC_CUT_MAIN" },
        { EV_TC_CUT_ALL, "EV_TC_CUT_ALL" },
        { EV_TC_CUT_FIRST_DROGUE, "EV_TC_CUT_FIRST_DROGUE" },
        { EV_TC_CLOSE_LOG, "EV_TC_CLOSE_LOG" },
        { EV_TC_DISARM, "EV_TC_DISARM" },
        { EV_TC_END_MISSION, "EV_TC_END_MISSION" },
        { EV_TC_FORCE_INIT, "EV_TC_FORCE_INIT" },
        { EV_TC_LAUNCH, "EV_TC_LAUNCH" },
        { EV_TC_MANUAL_MODE, "EV_TC_MANUAL_MODE" },
        { EV_TC_NC_CLOSE, "EV_TC_NC_CLOSE" },
        { EV_TC_NC_OPEN, "EV_TC_NC_OPEN" },
        { EV_TC_NC_STOP, "EV_TC_NC_STOP" },
        { EV_TC_START_SENSOR_LOGGING, "EV_TC_START_SENSOR_LOGGING" },
        { EV_TC_STOP_SENSOR_LOGGING, "EV_TC_STOP_SENSOR_LOGGING" },
        { EV_TC_SET_REFERENCE_ALTITUDE, "EV_TC_SET_REFERENCE_ALTITUDE" },
        { EV_TC_SET_REFERENCE_TEMP, "EV_TC_SET_REFERENCE_TEMP" },
        { EV_TC_CALIBRATE_ADA, "EV_TC_CALIBRATE_ADA" },
        { EV_TC_TEST_MODE, "EV_TC_TEST_MODE" },
        { EV_TC_TEST_SERVO, "EV_TC_TEST_SERVO" },
        { EV_TIMEOUT_APOGEE, "EV_TIMEOUT_APOGEE" },
        { EV_TIMEOUT_ARM, "EV_TIMEOUT_ARM" },
        { EV_TIMEOUT_CUTTING, "EV_TIMEOUT_CUTTING" },
        { EV_TIMEOUT_END_MISSION, "EV_TIMEOUT_END_MISSION" },
        { EV_TIMEOUT_MOT_CLOSE, "EV_TIMEOUT_MOT_CLOSE" },
        { EV_TIMEOUT_MOT_OPEN, "EV_TIMEOUT_MOT_OPEN" },
        { EV_TIMEOUT_SHADOW_MODE, "EV_TIMEOUT_SHADOW_MODE" },
        { EV_UMBILICAL_DETACHED, "EV_UMBILICAL_DETACHED" },
        { EV_SEND_HR_TM, "EV_SEND_HR_TM" },
        { EV_SEND_LR_TM, "EV_SEND_LR_TM" },
        { EV_SEND_TEST_TM, "EV_SEND_TEST_TM" },
        { EV_START_ROGALLO_CONTROL, "EV_START_ROGALLO_CONTROL" }
    };
    auto   it  = event_string_map.find(event);
    return it == event_string_map.end() ? "EV_UNKNOWN" : it->second;
}

string getTopicString(uint8_t topic)
{
	static const map<uint8_t, string> topic_string_map{
        { TOPIC_ADA, "TOPIC_ADA" },
        { TOPIC_DEPLOYMENT, "TOPIC_DEPLOYMENT" },
        { TOPIC_FLIGHT_EVENTS, "TOPIC_FLIGHT_EVENTS" },
        { TOPIC_FMM, "TOPIC_FMM" },
        { TOPIC_IGNITION, "TOPIC_IGNITION" },
        { TOPIC_TC, "TOPIC_TC" },
        { TOPIC_TMTC, "TOPIC_TMTC" },
        { TOPIC_CAN, "TOPIC_CAN" },
        { TOPIC_STATS, "TOPIC_STATS" }
	};
	auto it = topic_string_map.find(topic);
	return it == topic_string_map.end() ? "TOPIC_UNKNOWN" : it->second; 
}

}